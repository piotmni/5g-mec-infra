### MANAGED BY ppg.telegraf ANSIBLE ROLE ###

[global_tags]

############################################################################
#                                 AGENT                                    #
############################################################################

# Configuration for telegraf agent
[agent]
    interval = "10s"
    debug = false
    hostname = "{{ telegraf_agent_hostname }}"
    round_interval = true
    flush_interval = "10s"
    flush_jitter = "0s"
    collection_jitter = "0s"
    metric_batch_size = 1000
    metric_buffer_limit = 10000
    quiet = false
    logfile = "/var/log/telegraf/telegraf.log"
    omit_hostname = false



###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

[[outputs.prometheus_client]]
    listen = '0.0.0.0:1081'
    basic_username = 'prometheus'
    basic_password = '{{ prometheus_exporter_password_plain }}'
    metric_version = 2



###############################################################################
#                                  INPUTS                                     #
###############################################################################


[[inputs.cpu]]
    percpu = true
    totalcpu = true
    fielddrop = ['time_*']
[[inputs.disk]]
    ignore_fs = ["tmpfs", "devtmpfs", "overlay", "squashfs"]
[[inputs.diskio]]
    skip_serial_number = true
[[inputs.io]]
[[inputs.mem]]
[[inputs.net]]
    interfaces = {{ ansible_interfaces }}
[[inputs.system]]
[[inputs.swap]]
[[inputs.netstat]]
[[inputs.processes]]
[[inputs.kernel]]

{% if 'docker-ce' in ansible_facts.packages %}
[[inputs.docker]]
    endpoint = 'unix:///var/run/docker.sock'
    gather_services = false
    timeout = '5s'
    perdevice = true
    total = false
    namedrop = ['docker_container_cpu*']
    docker_label_exclude = ['*']
{% endif %}


[[inputs.conntrack]]
    files = [ 'ip_conntrack_count', 'ip_conntrack_max', 'nf_conntrack_count', 'nf_conntrack_max' ]
    dirs = [ '/proc/sys/net/ipv4/netfilter', '/proc/sys/net/netfilter' ]

#inputs prometheus for haproxy
{% if inventory_hostname in (groups["lb-api"] | default([])) %}
[[inputs.prometheus]]
  urls = ["http://prom:{{ prometheus_exporter_haproxy_password }}@localhost:8405/metrics"]
  fielddrop = ["url"]
  metric_version = 2
{% endif %}

# FULL
# amf, pcf, smf, upf
{% if inventory_hostname in (groups["open5gs"] | default([])) %}
[[inputs.prometheus]]
  urls = ["http://127.0.0.5:9090/metrics", "http://127.0.0.13:9090/metrics", "http://127.0.0.4:9090/metrics", "http://127.0.0.7:9090/metrics"]
  metric_version = 2
{% endif %}


# SEPARATED
{% if inventory_hostname in (groups["open5gs-core"] | default([])) %}
[[inputs.prometheus]]
  urls = ["http://127.0.0.5:9090/metrics", "http://127.0.0.13:9090/metrics", "http://127.0.0.4:9090/metrics"]
  metric_version = 2
{% endif %}

{% if inventory_hostname in (groups["open5gs-user-plane"] | default([])) %}
[[inputs.prometheus]]
  urls = ["http://127.0.0.7:9090/metrics"]
  metric_version = 2
{% endif %}

